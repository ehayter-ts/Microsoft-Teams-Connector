{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\r\nimport '@k2oss/k2-broker-core/test-framework';\r\nimport './index';\r\n\r\n\r\n//\r\n// WARNING: any tests that use this mock() must be run serially\r\n// (using test.serial()), because they modify global  !\r\nfunction mock(name: string, value: any) \r\n{\r\n    global[name] = value;\r\n}\r\n\r\n// helper method to pass the data which is dynamic to each test into the mocked XHR class object.\r\n// uses mock() so must only be used in test.serial()'y run tests\r\nfunction mockXHR(data){\r\n    let xhr: {[key:string]: any} = null;\r\n    class XHR {\r\n        public onreadystatechange: () => void;\r\n        public readyState: number;\r\n        public status: number;\r\n        public responseText: string;\r\n        private recorder: {[key:string]: any};\r\n\r\n        constructor() {\r\n            xhr = this.recorder = {};\r\n            this.recorder.headers = {};\r\n        }\r\n\r\n        open(method: string, url: string) {\r\n            this.recorder.opened = {method, url};\r\n        }\r\n\r\n        setRequestHeader(key: string, value: string) {\r\n            this.recorder.headers[key] = value;\r\n        }\r\n\r\n        send() {\r\n            queueMicrotask(() =>\r\n            {\r\n                this.readyState = 4;\r\n                this.status = 200;\r\n                // this.responseText = JSON.stringify({\r\n                //     \"id\": 4321,\r\n                //     \"requestStatusUrl\": undefined,\r\n                //     \"isSuccessful\": true\r\n                // });\r\n                this.responseText = JSON.stringify(data);\r\n                this.onreadystatechange();\r\n                delete this.responseText;\r\n            });\r\n        }\r\n    }\r\n\r\n    mock('XMLHttpRequest', XHR);\r\n}\r\n\r\ntest('onexecute fails for invalid object', t => {\r\n    t.throws(function () {\r\n        let obj = 'invalidObject';\r\n        onexecute(obj, '', {}, {});\r\n    });\r\n});\r\n\r\n//\r\n// // example of how to catch a throw exception\r\n// const promise = () => Promise.reject(new Error('TEST'));\r\n// test('rejects', async t => {\r\n//     const error = await t.throwsAsync(promise);\r\n//     t.is(error.message, 'TEST');\r\n// });\r\n\r\ntest.serial('onexecuteTeamArchive succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamArchive;\r\n\r\n    let data = {\r\n        [TeamId]: 1234\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) {\r\n        result = r;\r\n    }\r\n\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    // t.deepEqual(xhr, {\r\n    //     opened: {\r\n    //         method: 'GET',\r\n    //         url: 'https://jsonplaceholder.typicode.com/todos/123'\r\n    //     },\r\n    //     headers: {\r\n    //         'test': 'test value'\r\n    //     }\r\n    // });\r\n\r\n    t.deepEqual(result, {\r\n        [TeamId]: 1234,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamUnarchive succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let teamId = 4321;\r\n    let validObject = Team;\r\n    let method = TeamUnarchive;\r\n\r\n    let data = {\r\n        [TeamId]: teamId\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result, {\r\n        [TeamId]: teamId,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamClone succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamClone;\r\n\r\n    let teamId = 999;\r\n    let data = {\r\n        [TeamId]: teamId,\r\n        [TeamDisplayName]: \"SomeName\",\r\n        [TeamDescription]: \"SomeDescription\",\r\n        [TeamMailNickname]: \"SomeMailNickname\"\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [TeamId]: teamId,\r\n        [TeamRequestStatusUrl]: undefined,\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteTeamUpdate succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Team;\r\n    let method = TeamUpdate;\r\n\r\n    let teamId = 555;\r\n    let data = {\r\n        [TeamId]: teamId,\r\n        [TeamMsAllowCreateUpdateChannels]: true,\r\n        [TeamMsAllowDeleteChannels]: true,\r\n        [TeamMsAllowAddRemoveApps]: true,\r\n        [TeamMsAllowCreateUpdateRemoveTabs]: true,\r\n        [TeamMsAllowCreateUpdateRemoveConnectors]: true,\r\n        [TeamGsAllowCreateUpdateChannels]: true,\r\n        [TeamGsAllowDeleteChannels]: true,\r\n        [TeamMsgAllowUserEditMessages]: true,\r\n        [TeamMsgAllowUserDeleteMessages]: true,\r\n        [TeamMsgAllowTeamMentions]: true,\r\n        [TeamMsgAllowChannelMentions]: true,\r\n        [TeamFsAllowGiphy]: true,\r\n        [TeamFsAllowStickersAndMemes]: true,\r\n        [TeamFsAllowCustomMemes]: true\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [TeamIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteChannelUpdate succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelUpdate;\r\n\r\n    let channelId = 777;\r\n    let teamId = 888;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId,\r\n        [ChannelDisplayName]: \"SomeName\",\r\n        [ChannelDescription]: \"SomeDescription\"\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteChannelDelete succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelDelete;\r\n\r\n    let channelId = 345;\r\n    let teamId = 100;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});\r\n\r\ntest.serial('onexecuteSendMessage (of a Channel) succeeds', async t => {\r\n    //\r\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\r\n\r\n    let validObject = Channel;\r\n    let method = ChannelSendMessage;\r\n\r\n    let channelId = 345;\r\n    let teamId = 100;\r\n    let data = {\r\n        [ChannelId]: channelId,\r\n        [ChannelTeamId]: teamId,\r\n        [ChannelMessageSubject]: \"subject\",\r\n        [ChannelMessageBody]: \"body\",\r\n        [ChannelMessageIsImportant]: true\r\n    };\r\n    mockXHR(data);\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r;  }\r\n    mock('postResult', pr);\r\n\r\n    await onexecute(validObject, method, {}, data);\r\n\r\n    t.deepEqual(result,{\r\n        [ChannelIsSuccessful]: true\r\n    });\r\n\r\n    t.pass();\r\n});"],"names":["mock","name","value","global","mockXHR","data","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange","test","t","throws","onexecute","serial","async","validObject","Team","TeamArchive","TeamId","result","r","deepEqual","TeamRequestStatusUrl","undefined","TeamIsSuccessful","pass","TeamUnarchive","TeamClone","TeamDisplayName","TeamDescription","TeamMailNickname","TeamUpdate","TeamMsAllowCreateUpdateChannels","TeamMsAllowDeleteChannels","TeamMsAllowAddRemoveApps","TeamMsAllowCreateUpdateRemoveTabs","TeamMsAllowCreateUpdateRemoveConnectors","TeamGsAllowCreateUpdateChannels","TeamGsAllowDeleteChannels","TeamMsgAllowUserEditMessages","TeamMsgAllowUserDeleteMessages","TeamMsgAllowTeamMentions","TeamMsgAllowChannelMentions","TeamFsAllowGiphy","TeamFsAllowStickersAndMemes","TeamFsAllowCustomMemes","Channel","ChannelUpdate","ChannelId","ChannelTeamId","ChannelDisplayName","ChannelDescription","ChannelIsSuccessful","ChannelDelete","ChannelSendMessage","ChannelMessageSubject","ChannelMessageBody","ChannelMessageIsImportant"],"mappings":"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"}