{"version":3,"file":"run.js","sources":["../src/index.ts","../src/run.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"MSTeamsJSSP\",\r\n    displayName: \"Microsoft Teams Connector\",\r\n    description: \"A connector for Microsoft Teams\"\r\n};\r\n\r\n// Constants\r\nconst baseUriEndpoint = \"https://graph.microsoft.com/v1.0\";\r\nconst baseUriEndpointBeta = \"https://graph.microsoft.com/beta\";\r\n\r\n//\r\n// Objects\r\n\r\nconst Team = \"team\";\r\nconst Channel = \"channel\";\r\nconst Tab = \"tab\";\r\nconst App = \"app\";\r\nconst Token = \"token\";\r\n\r\n//\r\n// Team\r\nconst TeamId = \"id\";\r\nconst TeamWeburl = \"weburl\";\r\nconst TeamDisplayName = \"displayName\";\r\nconst TeamCreationDate = \"creationDate\"\r\nconst TeamDescription = \"description\";\r\nconst TeamEmail = \"email\";\r\nconst TeamMailEnabled = \"mailEnabled\";\r\nconst TeamMailNickname = \"mailNickname\";\r\nconst TeamArchiveStatus = \"archiveStatus\";\r\nconst TeamOperationId = \"operationId\";\r\nconst TeamOperationType = \"operationType\";\r\nconst TeamLastActionDate = \"lastActionDate\";\r\nconst TeamAttemptsCount = \"attemptsCount\";\r\nconst TeamTargetResourceId = \"targetResourceId\";\r\nconst TeamTargetResourceLocation = \"targetResourceLocation\";\r\nconst TeamArchiveError = \"archiveError\";\r\nconst TeamUserPrincipalName = \"userPrincipalName\";\r\nconst TeamResourceProvisioningOptions = \"resourceProvisioningOptions\";\r\nconst TeamIsArchived = \"isArchived\";\r\nconst TeamIsSuccessful = \"isSuccessful\";\r\nconst TeamRequestStatusUrl = \"requestStatusUrl\";\r\nconst TeamMsAllowCreateUpdateChannels = \"msAllowCreateUpdateChannels\";\r\nconst TeamMsAllowDeleteChannels = \"msAllowDeleteChannels\";\r\nconst TeamMsAllowAddRemoveApps = \"msAllowAddRemoveApps\";\r\nconst TeamMsAllowCreateUpdateRemoveTabs = \"msAllowCreateUpdateRemoveTabs\";\r\nconst TeamMsAllowCreateUpdateRemoveConnectors = \"msAllowCreateUpdateRemoveConnectors\";\r\nconst TeamGsAllowCreateUpdateChannels = \"gsAllowCreateUpdateChannels\";\r\nconst TeamGsAllowDeleteChannels = \"gsAllowDeleteChannels\";\r\nconst TeamMsgAllowUserEditMessages = \"msgsAllowUserEditMessages\";\r\nconst TeamMsgAllowUserDeleteMessages = \"msgsAllowUserDeleteMessages\";\r\nconst TeamMsgAllowOwnerDeleteMessages = \"msgsAllowOwnerDeleteMessages\";\r\nconst TeamMsgAllowTeamMentions = \"msgsAllowTeamMentions\";\r\nconst TeamMsgAllowChannelMentions = \"msgsAllowChannelMentions\";\r\nconst TeamFsAllowGiphy = \"fsAllowGiphy\";\r\nconst TeamFsAllowStickersAndMemes = \"fsAllowStickersAndMemes\";\r\nconst TeamFsAllowCustomMemes = \"fsAllowCustomMemes\";\r\n\r\nconst TeamGet = \"get\";\r\nconst TeamCreate = \"create\";\r\nconst TeamAdd = \"add\"; //  not used\r\nconst TeamArchive = \"archive\";\r\nconst TeamUnarchive = \"unarchive\";\r\nconst TeamCheckStatus = \"checkStatus\"; // not used\r\nconst TeamAddMember = \"addMember\";\r\nconst TeamRemoveMember = \"removeMember\";\r\nconst TeamUpdate = \"update\";\r\nconst TeamClone = \"clone\";\r\nconst TeamAddOwner = \"addOwner\";\r\nconst TeamList = \"list\";\r\nconst TeamMyTeamsList = \"myTeamsList\";\r\n\r\nconst TeamArchiveOperationUrl = \"archiveOperationUrl\";\r\nconst TeamAddAsMemberAlso = \"addAsMemberAlso\"; //  not used\r\nconst TeamDisplayNameStartsWith = \"displayNameStartsWith\";\r\nconst TeamUserId = \"userId\";\r\n\r\n//\r\n// Channel\r\nconst ChannelId = \"id\";\r\nconst ChannelDisplayName = \"displayName\";\r\nconst ChannelDescription = \"description\";\r\nconst ChannelEmail = \"email\";\r\nconst ChannelWeburl = \"weburl\";\r\nconst ChannelIsSuccessful = \"isSuccessful\";\r\nconst ChannelTeamId = \"teamId\";\r\nconst ChannelMessageSubject = \"messageSubject\";\r\nconst ChannelMessageBody = \"messageBody\";\r\nconst ChannelMessageId = \"messageId\";\r\nconst ChannelMessageIsImportant = \"messageIsImportant\";\r\nconst MembershipType = \"membershipType\";\r\nconst ChannelUserPrincipalName = \"userPrincipalName\";\r\nconst ChannelUserId = \"userId\";\r\nconst ChannelMessageUser = \"messageUser\";\r\nconst ChannelMessageDate = \"messageDate\";\r\n\r\nconst ChannelGet = \"get\";\r\nconst ChannelList = \"list\";\r\nconst ChannelCreate = \"create\";\r\nconst ChannelDelete = \"delete\";\r\nconst ChannelUpdate = \"update\";\r\nconst ChannelSendMessage = \"sendMessage\";\r\nconst ChannelSendAdaptiveCard = \"sendAdaptiveCard\";\r\nconst ChannelReplyMessage = \"replyMessage\";\r\nconst ChannelAddMember = \"addMember\";\r\nconst ChannelMessages = \"getMessages\";\r\n\r\n\r\n//\r\n// Tab\r\nconst TabId = \"id\";\r\nconst TabDisplayName = \"displayName\";\r\nconst TabWeburl = \"weburl\";\r\nconst TabConfigEntityId = \"configEntityId\";\r\nconst TabConfigContentUrl = \"configContentUrl\";\r\nconst TabConfigWebsiteUrl = \"configWebsiteUrl\";\r\nconst TabConfigRemoveUrl = \"configRemoveUrl\";\r\nconst TabTeamsAppAppId = \"teamsAppAppId\";\r\nconst TabTeamsAppExternalId = \"teamsAppExternalId\";\r\nconst TabTeamsAppAppDisplayName = \"teamsAppAppDisplayName\";\r\nconst TabTeamsAppDistMethod = \"teamsAppDistMethod\";\r\nconst TabSortOrderIndex = \"sortOrderIndex\";\r\nconst TabIsSuccessful = \"isSuccessful\";\r\nconst TabTeamId = \"teamId\";\r\nconst TabChannelId = \"channelId\";\r\n\r\nconst TabGet = \"get\";\r\nconst TabList = \"list\";\r\nconst TabCreateWordTab = \"createWordTab\";\r\nconst TabCreateExcelTab = \"createExcelTab\";\r\nconst TabCreatePowerPointTab = \"createPowerPointTab\";\r\nconst TabCreatePdfTab = \"createPdfTab\";\r\nconst TabCreateOneNoteTab = \"createOneNoteTab\";\r\nconst TabCreatePlannerTab = \"createPlannerTab\";\r\nconst TabCreateSharePointTab = \"createSharePointTab\";\r\nconst TabCreateMsFormsTab = \"createMsFormsTab\";\r\nconst TabCreateMsStreamTab = \"createStreamTab\";\r\nconst TabCreateWebsiteTab = \"createWebsiteTab\";\r\nconst TabCreateWikiTab = \"createWikiTab\";\r\nconst TabCreatePowerBiTab = \"createPowerBiTab\";\r\nconst TabCreateDocumentLibraryTab = \"createDocumentLibraryTab\";\r\nconst TabCreateCustomTab = \"createCustomTab\";\r\nconst TabDelete = \"delete\";\r\nconst TabUpdate = \"update\";\r\n\r\n//\r\n// App\r\nconst AppId = \"id\";\r\nconst AppTeamId = \"teamId\";\r\nconst AppDisplayName = \"displayName\";\r\nconst AppVersion = \"version\";\r\nconst AppTeamAppDefinitionId = \"teamsAppDefinitionId\";\r\nconst AppTeamsAppId = \"teamsAppId\";\r\n\r\nconst AppList = \"list\";\r\n\r\n//\r\n// Token\r\nconst TokenLifetime = \"tokenLifeTime\";\r\nconst TokenPolicyDisplayName = \"displayName\";\r\nconst TokenOrganizationDefault = \"isOrganizationDefault\";\r\nconst TokenUpdateSuccess = \"updateSuccess\";\r\n\r\nconst TokenPolicySet = \"setToken\";\r\n\r\n//OnDescribe\r\nondescribe = function () {\r\n    postSchema({\r\n\r\n        objects: {\r\n            [Team]: {\r\n                displayName: \"Team\",\r\n                description: \"Team\",\r\n                properties: {\r\n                    [TeamId]: {\r\n                        displayName: \"Team Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamWeburl]: {\r\n                        displayName: \"Web Url\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamDisplayName]: {\r\n                        displayName: \"Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamCreationDate]: {\r\n                        displayName: \"Created On\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamDescription]: {\r\n                        displayName: \"Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamEmail]: {\r\n                        displayName: \"Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamMailEnabled]: {\r\n                        displayName: \"Mail Enabled\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMailNickname]: {\r\n                        displayName: \"Mail Nickname\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamArchiveStatus]: {\r\n                        displayName: \"Archive Status\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamOperationId]: {\r\n                        displayName: \"Operation Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamOperationType]: {\r\n                        displayName: \"Operation Type\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamLastActionDate]: {\r\n                        displayName: \"Last Action Date\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamAttemptsCount]: {\r\n                        displayName: \"Attempts Count\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamTargetResourceId]: {\r\n                        displayName: \"Target Resource Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamTargetResourceLocation]: {\r\n                        displayName: \"Target Resource Location\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamArchiveError]: {\r\n                        displayName: \"Error\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamUserPrincipalName]: {\r\n                        displayName: \"User Principal Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamResourceProvisioningOptions]: {\r\n                        displayName: \"Resource Provisioning Options\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TeamIsArchived]: {\r\n                        displayName: \"Is Archived\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamIsSuccessful]: {\r\n                        displayName: \"Is Successful\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamRequestStatusUrl]: {\r\n                        displayName: \"Request Status Url\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsAllowCreateUpdateChannels]: {\r\n                        displayName: \"Allow create/update channels to members\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsAllowDeleteChannels]: {\r\n                        displayName: \"Allow delete channels to members\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsAllowAddRemoveApps]: {\r\n                        displayName: \"Allow add/remove apps to members\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsAllowCreateUpdateRemoveTabs]: {\r\n                        displayName: \"Allow create/update/remove tabs to members\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsAllowCreateUpdateRemoveConnectors]: {\r\n                        displayName: \"Allow create/update/remove connectors to members\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamGsAllowCreateUpdateChannels]: {\r\n                        displayName: \"Allow create/update channels to guests\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamGsAllowDeleteChannels]: {\r\n                        displayName: \"Allow delete channels to guests\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsgAllowUserEditMessages]: {\r\n                        displayName: \"Allow user to edit messages\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsgAllowUserDeleteMessages]: {\r\n                        displayName: \"Allow user to delete messages\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsgAllowOwnerDeleteMessages]: {\r\n                        displayName: \"Allow owner to delete messages\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsgAllowTeamMentions]: {\r\n                        displayName: \"Allow team mentions\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamMsgAllowChannelMentions]: {\r\n                        displayName: \"Allow channel mentions\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamFsAllowGiphy]: {\r\n                        displayName: \"Allow Giphy\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamFsAllowStickersAndMemes]: {\r\n                        displayName: \"Allow stickers and memes\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TeamFsAllowCustomMemes]: {\r\n                        displayName: \"Allow custom memes\",\r\n                        type: \"boolean\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [TeamGet]: {\r\n                        displayName: \"Get\",\r\n                        description: \"Retrieves the details of a Team\",\r\n                        type: \"read\",\r\n                        inputs: [TeamId],\r\n                        requiredInputs: [TeamId],\r\n                        outputs: [\r\n                            TeamId,\r\n                            TeamDisplayName,\r\n                            TeamCreationDate,\r\n                            TeamDescription,\r\n                            TeamEmail,\r\n                            TeamMailEnabled,\r\n                            TeamMailNickname,\r\n                            TeamWeburl,\r\n                            TeamArchiveStatus,\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamCreate]: {\r\n                        displayName: \"Create\",\r\n                        description: \"Creates a Team\",\r\n                        type: \"create\",\r\n                        inputs: [\r\n                            TeamDisplayName,\r\n                            TeamDescription,\r\n                            TeamMailEnabled,\r\n                            TeamMailNickname,\r\n                            TeamUserPrincipalName\r\n                        ],\r\n                        requiredInputs: [TeamDisplayName,\r\n                            TeamMailEnabled,\r\n                            TeamMailNickname\r\n                        ],\r\n                        outputs: [\r\n                            TeamId,\r\n                            TeamDisplayName,\r\n                            TeamCreationDate,\r\n                            TeamDescription,\r\n                            TeamEmail,\r\n                            TeamMailEnabled,\r\n                            TeamMailNickname,\r\n                            TeamWeburl,\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    // [TeamAdd]: {\r\n                    //     displayName: \"Add\",\r\n                    //     description: \"Adds a Team to an existing group\",\r\n                    //     type: \"create\",\r\n                    //     inputs: [TeamId,\r\n                    //         TeamUserPrincipalName\r\n                    //     ],\r\n                    //     outputs: [TeamId,\r\n                    //         TeamDisplayName,\r\n                    //         TeamCreationDate,\r\n                    //         TeamDescription,\r\n                    //         TeamEmail,\r\n                    //         TeamMailEnabled,\r\n                    //         TeamMailNickname,\r\n                    //         TeamWeburl,\r\n                    //         TeamIsSuccessful\r\n                    //     ]\r\n                    // },\r\n                    [TeamArchive]: {\r\n                        displayName: \"Archive\",\r\n                        description: \"Archives a Team (makes it read-only)\",\r\n                        type: \"execute\",\r\n                        inputs: [TeamId],\r\n                        requiredInputs: [TeamId],\r\n                        outputs: [TeamId,\r\n                            TeamRequestStatusUrl,\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamUnarchive]: {\r\n                        displayName: \"Unarchive\",\r\n                        description: \"Unarchives a Team\",\r\n                        type: \"execute\",\r\n                        inputs: [TeamId],\r\n                        requiredInputs: [TeamId],\r\n                        outputs: [TeamId,\r\n                            TeamRequestStatusUrl,\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    /*                     [TeamCheckStatus]: {\r\n                                            displayName: \"Check Status\",\r\n                                            description: \"Check the status of an Archive job.\",\r\n                                            type: \"execute\",\r\n                                            parameters: {\r\n                                                [TeamArchiveOperationUrl]: {\r\n                                                    displayName: \"Archive/Unarchive operation URL\",\r\n                                                    type: \"string\"\r\n                                                }\r\n                                            },\r\n                                            requiredParameters: [TeamArchiveOperationUrl],\r\n                                            outputs: [TeamOperationId,\r\n                                                TeamOperationType,\r\n                                                TeamCreationDate,\r\n                                                TeamArchiveStatus,\r\n                                                TeamLastActionDate,\r\n                                                TeamAttemptsCount,\r\n                                                TeamTargetResourceId,\r\n                                                TeamTargetResourceLocation,\r\n                                                TeamArchiveError\r\n                                            ]\r\n                                        }, */\r\n                    [TeamAddMember]: {\r\n                        displayName: \"Add Member\",\r\n                        description: \"Adds a member to a Team\",\r\n                        type: \"create\",\r\n                        inputs: [TeamId,\r\n                            TeamUserPrincipalName\r\n                        ],\r\n                        requiredInputs: [TeamId,\r\n                            TeamUserPrincipalName\r\n                        ],\r\n                        outputs: [TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamRemoveMember]: { // TODO\r\n                        displayName: \"Remove Member\",\r\n                        description: \"Removes a member from a Team\",\r\n                        type: \"delete\",\r\n                        inputs: [\r\n                            TeamId,\r\n                            TeamUserPrincipalName // TODO maybe id ?\r\n                        ],\r\n                        requiredInputs: [\r\n                            TeamId,\r\n                            TeamUserPrincipalName // TODO maybe id ?\r\n                        ],\r\n                        outputs: [\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamUpdate]: {\r\n                        displayName: \"Update\",\r\n                        description: \"Updates a Team's settings\",\r\n                        type: \"update\",\r\n                        inputs: [TeamId,\r\n                            TeamMsAllowCreateUpdateChannels,\r\n                            TeamMsAllowDeleteChannels,\r\n                            TeamMsAllowAddRemoveApps,\r\n                            TeamMsAllowCreateUpdateRemoveTabs,\r\n                            TeamMsAllowCreateUpdateRemoveConnectors,\r\n                            TeamGsAllowCreateUpdateChannels,\r\n                            TeamGsAllowDeleteChannels,\r\n                            TeamMsgAllowUserEditMessages,\r\n                            TeamMsgAllowUserDeleteMessages,\r\n                            TeamMsgAllowUserDeleteMessages,\r\n                            TeamMsgAllowTeamMentions,\r\n                            TeamMsgAllowChannelMentions,\r\n                            TeamFsAllowGiphy,\r\n                            TeamFsAllowStickersAndMemes,\r\n                            TeamFsAllowCustomMemes\r\n                        ],\r\n                        requiredInputs: [TeamId],\r\n                        outputs: [TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamClone]: {\r\n                        displayName: \"Copy/Clone\",\r\n                        description: \"Makes a copy of an existing Team\",\r\n                        type: \"create\",\r\n                        inputs: [TeamId,\r\n                            TeamDisplayName,\r\n                            TeamDescription,\r\n                            TeamMailNickname\r\n                        ],\r\n                        requiredInputs: [TeamId,\r\n                            TeamDisplayName,\r\n                            TeamDescription,\r\n                            TeamMailNickname\r\n                        ],\r\n                        outputs: [TeamId,\r\n                            TeamRequestStatusUrl,\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamAddOwner]: {\r\n                        displayName: \"Add Owner\",\r\n                        description: \"Adds an Owner to a Team\",\r\n                        type: \"execute\",\r\n                        // parameters: {\r\n                        //     [TeamAddAsMemberAlso]: {\r\n                        //         displayName: \"Add as Member Also\",\r\n                        //         type: \"boolean\"\r\n                        //     }\r\n                        // },\r\n                        inputs: [TeamId,\r\n                            TeamUserPrincipalName\r\n                        ],\r\n                        requiredInputs: [TeamId,\r\n                            TeamUserPrincipalName\r\n                        ],\r\n                        outputs: [\r\n                            TeamIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TeamList]: {\r\n                        displayName: \"List\",\r\n                        description: \"Lists all Teams and groups without Teams\",\r\n                        type: \"list\",\r\n                        parameters: {\r\n                            [TeamDisplayNameStartsWith]: {\r\n                                displayName: \"Display Name Starts With\",\r\n                                type: \"string\"\r\n                            }\r\n                        },\r\n                        outputs: [TeamId,\r\n                            TeamDisplayName,\r\n                            TeamResourceProvisioningOptions\r\n                        ]\r\n                    },\r\n                    [TeamMyTeamsList]: {\r\n                        displayName: \"List My Teams\",\r\n                        description: \"Lists all Teams you belong to\",\r\n                        type: \"list\",\r\n                        outputs: [TeamId,\r\n                            TeamDisplayName,\r\n                            TeamDescription,\r\n                            TeamIsArchived\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            [Channel]: {\r\n                displayName: \"Channel\",\r\n                description: \"Channel\",\r\n                properties: {\r\n                    [ChannelId]: {\r\n                        displayName: \"Channel Id\",\r\n                        description: \"Channel Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelDisplayName]: {\r\n                        displayName: \"Display Name\",\r\n                        description: \"Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelDescription]: {\r\n                        displayName: \"Description\",\r\n                        description: \"Description\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelEmail]: {\r\n                        displayName: \"Email\",\r\n                        description: \"Email\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelWeburl]: {\r\n                        displayName: \"Web URL\",\r\n                        description: \"Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelIsSuccessful]: {\r\n                        displayName: \"Is Successful\",\r\n                        description: \"Is Successful\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelTeamId]: {\r\n                        displayName: \"Team Id\",\r\n                        description: \"Team Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelMessageSubject]: {\r\n                        displayName: \"Subject\",\r\n                        description: \"Message Subject\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelMessageId]: {\r\n                        displayName: \"Message Id\",\r\n                        description: \"Message Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelMessageBody]: {\r\n                        displayName: \"Body\",\r\n                        description: \"Message Body\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelMessageIsImportant]: {\r\n                        displayName: \"Is Important\",\r\n                        description: \"Message Importance (Normal/High)\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [MembershipType]: {\r\n                        displayName: \"Membership Type\",\r\n                        description: \"Type of Channel\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelUserPrincipalName]: {\r\n                        displayName: \"User Principal Name\",\r\n                        description: \"Principal Name of User\",\r\n                        type: \"string\"\r\n                    },\r\n                    [ChannelMessageDate]: {\r\n                        displayName: \"Message Date\",\r\n                        description: \"Message Date\",\r\n                        type: \"dateTime\"\r\n                    },\r\n                    [ChannelMessageUser]: {\r\n                        displayName: \"Message User\",\r\n                        description: \"Message User\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [ChannelGet]: {\r\n                        displayName: \"Get\",\r\n                        description: \"Retrieves the details of a Channel\",\r\n                        type: \"read\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId\r\n                        ],\r\n                        requiredInputs: [ChannelId,\r\n                            ChannelTeamId],\r\n                        outputs: [ChannelId,\r\n                            ChannelDisplayName,\r\n                            ChannelDescription,\r\n                            ChannelEmail,\r\n                            ChannelWeburl,\r\n                            ChannelIsSuccessful\r\n                        ]\r\n                    },\r\n                    [ChannelList]: {\r\n                        displayName: \"List\",\r\n                        description: \"List the channels in a Team\",\r\n                        type: \"list\",\r\n                        inputs: [ChannelTeamId],\r\n                        requiredInputs: [ChannelTeamId],\r\n                        outputs: [ChannelId,\r\n                            ChannelDisplayName,\r\n                            ChannelDescription,\r\n                            ChannelEmail\r\n                        ]\r\n                    },\r\n                    [ChannelCreate]: {\r\n                        displayName: \"Create\",\r\n                        description: \"Creates a new Channel\",\r\n                        type: \"create\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelDisplayName,\r\n                            MembershipType,\r\n                            ChannelDescription\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelDisplayName,\r\n                            MembershipType\r\n                        ],\r\n                        outputs: [ChannelId,\r\n                            ChannelDisplayName,\r\n                            ChannelDescription,\r\n                            ChannelEmail,\r\n                            ChannelWeburl,\r\n                            ChannelIsSuccessful\r\n                        ]\r\n                    },\r\n                    [ChannelDelete]: {\r\n                        displayName: \"Delete\",\r\n                        description: \"Deletes a Channel\",\r\n                        type: \"delete\",\r\n                        inputs: [ChannelId,\r\n                            ChannelTeamId\r\n                        ],\r\n                        requiredInputs: [ChannelId,\r\n                            ChannelTeamId],\r\n                        outputs: [ChannelIsSuccessful]\r\n                    },\r\n                    [ChannelUpdate]: {\r\n                        displayName: \"Update\",\r\n                        description: \"Updates a Channel\",\r\n                        type: \"update\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelDisplayName,\r\n                            ChannelDescription\r\n                        ],\r\n                        requiredInputs: [ChannelId,\r\n                            ChannelTeamId,\r\n                            ChannelDisplayName,\r\n                            ChannelDescription],\r\n                        outputs: [ChannelIsSuccessful]\r\n                    },\r\n                    [ChannelAddMember]: {\r\n                        displayName: \"Add Member\",\r\n                        description: \"Adds a member to a Channel\",\r\n                        type: \"create\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelUserPrincipalName\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelUserPrincipalName\r\n                        ],\r\n                        outputs: [ChannelIsSuccessful]\r\n                    },\r\n                    [ChannelSendMessage]: {\r\n                        displayName: \"Send Message\",\r\n                        description: \"Sends a Message to a Channel\",\r\n                        type: \"create\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageSubject,\r\n                            ChannelMessageBody,\r\n                            ChannelMessageIsImportant\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageBody\r\n                        ],\r\n                        outputs: [ChannelIsSuccessful, ChannelMessageId]\r\n                    },\r\n                    [ChannelReplyMessage]: {\r\n                        displayName: \"Reply to a Message\",\r\n                        description: \"Reply to a Message in a Channel\",\r\n                        type: \"create\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageId,\r\n                            ChannelMessageBody\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageId,\r\n                            ChannelMessageBody\r\n                        ],\r\n                        outputs: [ChannelIsSuccessful]\r\n                    },\r\n                    [ChannelSendAdaptiveCard]: {\r\n                        displayName: \"Send Adaptive Card\",\r\n                        description: \"Sends a Message to a Channel\",\r\n                        type: \"create\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageBody\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelId,\r\n                            ChannelMessageBody\r\n                        ],\r\n                        outputs: [ChannelIsSuccessful, ChannelMessageId]\r\n                    },\r\n                    [ChannelMessages]: {\r\n                        displayName: \"Get Messages in a Channel\",\r\n                        description: \"Get Messages in a Channel\",\r\n                        type: \"list\",\r\n                        inputs: [ChannelTeamId,\r\n                            ChannelId\r\n                        ],\r\n                        requiredInputs: [ChannelTeamId,\r\n                            ChannelId\r\n                        ],\r\n                        outputs: [ChannelMessageId, ChannelMessageBody, ChannelMessageDate, ChannelMessageUser]\r\n                    }\r\n                }\r\n            },\r\n            [Tab]: {\r\n                displayName: \"Tab\",\r\n                description: \"Tab\",\r\n                properties: {\r\n                    [TabId]: {\r\n                        displayName: \"Tab Id\",\r\n                        description: \"Tab Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabDisplayName]: {\r\n                        displayName: \"Display Name\",\r\n                        description: \"Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabConfigEntityId]: {\r\n                        displayName: \"Entity Id\",\r\n                        description: \"Entity Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabConfigContentUrl]: {\r\n                        displayName: \"Content URL\",\r\n                        description: \"Content URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabConfigWebsiteUrl]: {\r\n                        displayName: \"Website URL\",\r\n                        description: \"Website URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabConfigRemoveUrl]: {\r\n                        displayName: \"Remove URL\",\r\n                        description: \"Remove URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabTeamsAppAppId]: {\r\n                        displayName: \"App Id\",\r\n                        description: \"App Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabTeamsAppExternalId]: {\r\n                        displayName: \"External Id\",\r\n                        description: \"External Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabTeamsAppAppDisplayName]: {\r\n                        displayName: \"App Display Name\",\r\n                        description: \"App Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabTeamsAppDistMethod]: {\r\n                        displayName: \"Distribution Method\",\r\n                        description: \"Distribution Method\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabSortOrderIndex]: {\r\n                        displayName: \"Sort Order Index\",\r\n                        description: \"Sort Order Index\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabWeburl]: {\r\n                        displayName: \"Web URL\",\r\n                        description: \"Web URL\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabIsSuccessful]: {\r\n                        displayName: \"Is Successful\",\r\n                        description: \"Is Successful\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TabTeamId]: {\r\n                        displayName: \"Team Id\",\r\n                        description: \"Team Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TabChannelId]: {\r\n                        displayName: \"Channel Id\",\r\n                        description: \"Channel Id\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [TabGet]: {\r\n                        displayName: \"Get\",\r\n                        description: \"Get the details of a tab.\",\r\n                        type: \"read\",\r\n                        inputs: [TabId,\r\n                            TabTeamId,\r\n                            TabChannelId\r\n                        ],\r\n                        requiredInputs: [TabId,\r\n                            TabTeamId,\r\n                            TabChannelId\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabTeamsAppAppId,\r\n                            TabTeamsAppExternalId,\r\n                            TabTeamsAppAppDisplayName,\r\n                            TabTeamsAppDistMethod,\r\n                            TabSortOrderIndex,\r\n                            TabWeburl\r\n                        ]\r\n                    },\r\n                    [TabList]: {\r\n                        displayName: \"List\",\r\n                        description: \"List tabs\",\r\n                        type: \"list\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl\r\n                        ]\r\n                    },\r\n                    [TabCreateWordTab]: {\r\n                        displayName: \"Create Word tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateExcelTab]: {\r\n                        displayName: \"Create Excel tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreatePowerPointTab]: {\r\n                        displayName: \"Create PowerPoint tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreatePdfTab]: {\r\n                        displayName: \"Create PDF tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateOneNoteTab]: {\r\n                        displayName: \"Create OneNote tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreatePlannerTab]: {\r\n                        displayName: \"Create Planner tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateSharePointTab]: {\r\n                        displayName: \"Create SharePoint tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateMsFormsTab]: {\r\n                        displayName: \"Create Forms tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateMsStreamTab]: {\r\n                        displayName: \"Create Stream tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateWebsiteTab]: {\r\n                        displayName: \"Create Website tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateWikiTab]: {\r\n                        displayName: \"Create Wiki tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreatePowerBiTab]: {\r\n                        displayName: \"Create PowerBI tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateDocumentLibraryTab]: {\r\n                        displayName: \"Create Document tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabCreateCustomTab]: {\r\n                        displayName: \"Create custom tab\",\r\n                        type: \"create\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabTeamsAppAppId,\r\n                            TabDisplayName,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabTeamsAppAppId,\r\n                            TabDisplayName\r\n                        ],\r\n                        outputs: [TabId,\r\n                            TabDisplayName,\r\n                            TabWeburl,\r\n                            TabConfigEntityId,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl,\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabDelete]: {\r\n                        displayName: \"Delete tab\",\r\n                        type: \"delete\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabId\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabId\r\n                        ],\r\n                        outputs: [\r\n                            TabIsSuccessful\r\n                        ]\r\n                    },\r\n                    [TabUpdate]: {\r\n                        displayName: \"Update tab\",\r\n                        type: \"update\",\r\n                        inputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabId,\r\n                            TabDisplayName,\r\n                            TabConfigContentUrl,\r\n                            TabConfigWebsiteUrl,\r\n                            TabConfigRemoveUrl\r\n                        ],\r\n                        requiredInputs: [TabTeamId,\r\n                            TabChannelId,\r\n                            TabId\r\n                        ],\r\n                        outputs: [TabIsSuccessful]\r\n                    },\r\n                }\r\n            },\r\n            [App]: {\r\n                displayName: \"App\",\r\n                description: \"App\",\r\n                properties: {\r\n                    [AppId]: {\r\n                        displayName: \"App Id\",\r\n                        description: \"App Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [AppTeamId]: {\r\n                        displayName: \"Team Id\",\r\n                        description: \"Team Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [AppDisplayName]: {\r\n                        displayName: \"App Display Name\",\r\n                        description: \"App Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [AppVersion]: {\r\n                        displayName: \"version\",\r\n                        description: \"version\",\r\n                        type: \"string\"\r\n                    },\r\n                    [AppTeamAppDefinitionId]: {\r\n                        displayName: \"Teams App Definition Id\",\r\n                        description: \"Teams App Definition Id\",\r\n                        type: \"string\"\r\n                    },\r\n                    [AppTeamsAppId]: {\r\n                        displayName: \"Teams App Id\",\r\n                        description: \"Teams App Id\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [AppList]: {\r\n                        displayName: \"List installed apps\",\r\n                        type: \"list\",\r\n                        inputs: [AppTeamId],\r\n                        requiredInputs: [AppTeamId],\r\n                        outputs: [AppId,\r\n                            AppDisplayName,\r\n                            AppVersion,\r\n                            AppTeamAppDefinitionId,\r\n                            AppTeamsAppId\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            [Token]: {\r\n                displayName: \"Token\",\r\n                description: \"Token\",\r\n                properties: {\r\n                    [TokenLifetime]: {\r\n                        displayName: \"Token Lifetime (hh:mm:ss)\",\r\n                        description: \"Token Lifetime (hh:mm:ss)\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TokenPolicyDisplayName]: {\r\n                        displayName: \"Policy Display Name\",\r\n                        description: \"Policy Display Name\",\r\n                        type: \"string\"\r\n                    },\r\n                    [TokenOrganizationDefault]: {\r\n                        displayName: \"Is Organization Default\",\r\n                        description: \"Is Organization Default\",\r\n                        type: \"boolean\"\r\n                    },\r\n                    [TokenUpdateSuccess]: {\r\n                        displayName: \"Policy Update Success\",\r\n                        description: \"Policy Update Success\",\r\n                        type: \"boolean\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    [TokenPolicySet]: {\r\n                        displayName: \"Set Token Policy\",\r\n                        type: \"execute\",\r\n                        inputs: [TokenLifetime, TokenPolicyDisplayName, TokenOrganizationDefault],\r\n                        requiredInputs: [TokenLifetime, TokenPolicyDisplayName],\r\n                        outputs: [TokenUpdateSuccess]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// OnExecute\r\nonexecute = function ({ objectName, methodName, parameters, properties }) {\r\n    switch (objectName) {\r\n        case Team:\r\n            onexecuteTeam(methodName, parameters, properties);\r\n            break;\r\n        case Channel:\r\n            onexecuteChannel(methodName, parameters, properties);\r\n            break;\r\n        case Tab:\r\n            onexecuteTab(methodName, parameters, properties);\r\n            break;\r\n        case App:\r\n            onexecuteApp(methodName, parameters, properties);\r\n            break;\r\n        case Token:\r\n            onexecuteToken(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteApp(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case AppList:\r\n            onexecuteInstalledAppList(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteToken(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case TokenPolicySet:\r\n            onexecutePolicySet(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteTeam(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    if (properties == null && parameters == null) {\r\n        //do nothing\r\n    }\r\n    else if (properties == null && parameters !== null) {\r\n        parameters[TeamIsSuccessful] = true;\r\n    }\r\n    else {\r\n        properties[TeamIsSuccessful] = true;\r\n    }\r\n    switch (methodName) {\r\n        case TeamGet:\r\n            onexecuteTeamGet(parameters, properties);\r\n            break;\r\n        case TeamCreate:\r\n            onexecuteTeamCreate(parameters, properties);\r\n            break;\r\n        case TeamAdd:\r\n            onexecuteTeamAdd(parameters, properties);\r\n            break;\r\n        case TeamUpdate:\r\n            onexecuteTeamUpdate(parameters, properties);\r\n            break;\r\n        case TeamList:\r\n            onexecuteTeamList(parameters, properties);\r\n            break;\r\n        case TeamArchive:\r\n            onexecuteTeamArchive(parameters, properties);\r\n            break;\r\n        case TeamUnarchive:\r\n            onexecuteTeamUnarchive(parameters, properties);\r\n            break;\r\n        case TeamAddMember:\r\n            onexecuteTeamAddMember(parameters, properties);\r\n            break;\r\n        case TeamRemoveMember:\r\n            onexecuteTeamRemoveMember(parameters, properties);\r\n            break;\r\n        case TeamClone:\r\n            onexecuteTeamClone(parameters, properties);\r\n            break;\r\n        case TeamAddOwner:\r\n            onexecuteTeamAddOwner(parameters, properties);\r\n            break;\r\n        case TeamMyTeamsList:\r\n            onexecuteTeamMyTeamsList(parameters, properties);\r\n            break;\r\n        case TeamCheckStatus:\r\n            onexecuteTeamCheckStatus(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteTab(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    if (properties == null && parameters == null) {\r\n        //do nothing\r\n    }\r\n    else if (properties == null && parameters !== null) {\r\n        parameters[TabIsSuccessful] = true;\r\n    }\r\n    else {\r\n        properties[TabIsSuccessful] = true;\r\n    }\r\n    switch (methodName) {\r\n        case TabGet:\r\n            onexecuteTabGet(parameters, properties);\r\n            break;\r\n        case TabUpdate:\r\n            onexecuteTabUpdate(parameters, properties);\r\n            break;\r\n        case TabList:\r\n            onexecuteTabList(parameters, properties);\r\n            break;\r\n        case TabDelete:\r\n            onexecuteTabDelete(parameters, properties);\r\n            break;\r\n        case TabCreateWordTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateExcelTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreatePowerPointTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreatePdfTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateOneNoteTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreatePlannerTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateSharePointTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateMsFormsTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateMsStreamTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateWebsiteTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateWikiTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreatePowerBiTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateDocumentLibraryTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        case TabCreateCustomTab:\r\n            onexecuteTabCreate(methodName, parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported..\");\r\n    }\r\n}\r\n\r\nfunction onexecuteTeamGet(parameters: SingleRecord, properties: SingleRecord) {\r\n    properties[TeamIsSuccessful] = true;\r\n    //properties[TeamId] = properties[TeamId];\r\n    // Get Group Details By Group ID\r\n    GetGroupDetailsById(parameters, properties, function (b) {\r\n        properties[TeamDisplayName] = b.displayName;\r\n        properties[TeamCreationDate] = b.createdDateTime;\r\n        properties[TeamDescription] = b.description;\r\n        properties[TeamEmail] = b.mail;\r\n        properties[TeamMailEnabled] = b.mailEnabled;\r\n        properties[TeamMailNickname] = b.mailNickname;\r\n        //Get Team Details By Group ID\r\n        GetTeamDetailsByID(parameters, properties, function (c) {\r\n            properties[TeamWeburl] = c.webUrl;\r\n            properties[TeamArchiveStatus] = c.isArchived;\r\n            //Post Results\r\n            CreateAndReturnTeamObject(parameters, properties);\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamCreate(parameters: SingleRecord, properties: SingleRecord) {\r\n    // Create a Group, then add a team\r\n    properties[TeamIsSuccessful] = true;\r\n    CreateGroup(parameters, properties, function (a) {\r\n        //properties[TeamId] = parameters[TeamId] = a.id;\r\n        properties[TeamId] = a.id;\r\n        properties[TeamCreationDate] = a.createdDateTime;\r\n        properties[TeamDescription] = a.description;\r\n        properties[TeamDisplayName] = a.displayName;\r\n        properties[TeamEmail] = a.mail;\r\n        properties[TeamMailEnabled] = a.mailEnabled;\r\n        properties[TeamMailNickname] = a.mailNickname;\r\n        //Create a Team under the above Group\r\n        CreateTeam(parameters, properties, function (b) {\r\n            properties[TeamWeburl] = b.webUrl;\r\n            //Get User\r\n            // GetUser(parameters, properties, function (c) {\r\n            //     parameters[TeamUserId] = c.id;\r\n            //     //Add Group Owner\r\n            //     AddGroupOwner(parameters, properties, function (d) {\r\n            //         //Add Members to the Group\r\n            //         AddGroupMembers(parameters, properties, function (d) {\r\n            //             //Post Results\r\n            CreateAndReturnTeamObject(parameters, properties);\r\n            //         });\r\n            //     });\r\n            // });\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetGroupIdByMailNickName(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var component = encodeURIComponent(`?$filter=mailNickName&q='${properties[TeamMailNickname]}'`);\r\n    var url = baseUriEndpoint + \"/groups\" + component;\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetGroupDetailsById(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/groups/\" + encodeURIComponent(teamId);\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetTeamDetailsByID(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(teamId);\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction CreateGroup(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    //Create Body for GROUP POST\r\n    var data = JSON.stringify({\r\n        \"description\": properties[TeamDescription],\r\n        \"displayName\": properties[TeamDisplayName],\r\n        \"groupTypes\": [\"Unified\"],\r\n        \"mailEnabled\": properties[TeamMailEnabled],\r\n        \"mailNickname\": properties[TeamMailNickname],\r\n        \"visibility\": \"Private\",\r\n        \"securityEnabled\": false\r\n    });\r\n    var url = baseUriEndpoint + \"/groups/\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction CreateTeam(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    // var data = JSON.stringify({\r\n    //     \"memberSettings\": {\r\n    //         \"allowCreateUpdateChannels\": true\r\n    //     },\r\n    //     \"messagingSettings\": {\r\n    //         \"allowUserEditMessages\": true,\r\n    //         \"allowUserDeleteMessages\": true\r\n    //     },\r\n    //     \"funSettings\": {\r\n    //         \"allowGiphy\": true,\r\n    //         \"giphyContentRating\": \"strict\"\r\n    //     }\r\n    // });\r\n    var data = JSON.stringify({});\r\n    var url = baseUriEndpoint + \"/groups/\" + properties[TeamId] + \"/team\";\r\n    ExecuteRequest(url, data, \"PUT\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction ArchiveTeam(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"shouldSetSpoSiteReadOnlyForMembers\": true\r\n    });\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(teamId) + \"/archive\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction UnarchiveTeam(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = null;\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(teamId) + \"/unarchive\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction UpdateTeam(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    //TODO - define properties that has to be updated\r\n    var data = JSON.stringify({\r\n        \"memberSettings\": {\r\n            \"allowCreateUpdateChannels\": properties[TeamMsAllowCreateUpdateChannels],\r\n            \"allowDeleteChannels\": properties[TeamMsAllowDeleteChannels],\r\n            \"allowAddRemoveApps\": properties[TeamMsAllowAddRemoveApps],\r\n            \"allowCreateUpdateRemoveTabs\": properties[TeamMsAllowCreateUpdateRemoveTabs],\r\n            \"allowCreateUpdateRemoveConnectors\": properties[TeamMsAllowCreateUpdateRemoveConnectors]\r\n        },\r\n        \"guestSettings\": {\r\n            \"allowCreateUpdateChannels\": properties[TeamGsAllowCreateUpdateChannels],\r\n            \"allowDeleteChannels\": properties[TeamGsAllowDeleteChannels]\r\n        },\r\n        \"messagingSettings\": {\r\n            \"allowUserEditMessages\": properties[TeamMsgAllowUserEditMessages],\r\n            \"allowUserDeleteMessages\": properties[TeamMsgAllowUserDeleteMessages],\r\n            \"allowOwnerDeleteMessages\": properties[TeamMsgAllowUserDeleteMessages],\r\n            \"allowTeamMentions\": properties[TeamMsgAllowTeamMentions],\r\n            \"allowChannelMentions\": properties[TeamMsgAllowChannelMentions]\r\n        },\r\n        \"funSettings\": {\r\n            \"allowGiphy\": properties[TeamFsAllowGiphy],\r\n            \"allowStickersAndMemes\": properties[TeamFsAllowStickersAndMemes],\r\n            \"allowCustomMemes\": properties[TeamFsAllowCustomMemes]\r\n        }\r\n    });\r\n    var url = baseUriEndpoint + \"/teams/\" + properties[TeamId];\r\n    ExecuteRequest(url, data, \"PATCH\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction CloneTeam(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"displayName\": properties[TeamDisplayName],\r\n        \"description\": properties[TeamDescription],\r\n        \"mailNickname\": properties[TeamMailNickname],\r\n        \"partsToClone\": \"apps,tabs,settings,channels,members\",\r\n        \"visibility\": \"public\"\r\n    });\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(teamId) + \"/clone\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetUser(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let teamUserPrincipalName = properties[TeamUserPrincipalName];\r\n    if (!(typeof teamUserPrincipalName === \"string\")) throw new Error(\"properties[TeamUserPrincipalName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/users/\" + encodeURIComponent(teamUserPrincipalName);\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetChannelUser(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let channelUserPrincipalName = properties[ChannelUserPrincipalName];\r\n    if (!(typeof channelUserPrincipalName === \"string\")) throw new Error(\"properties[ChannelUserPrincipalName] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/users/\" + encodeURIComponent(channelUserPrincipalName);\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetUsers(cb) {\r\n    var url = baseUriEndpoint + \"/users\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction AddGroupOwner(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"@odata.id\": baseUriEndpoint + \"/users/\" + properties[TeamUserId]\r\n    });\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/groups/\" + encodeURIComponent(teamId) + \"/owners/$ref\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction AddGroupMembers(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"@odata.id\": baseUriEndpoint + \"/directoryObjects/\" + properties[TeamUserId]\r\n    });\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/groups/\" + encodeURIComponent(teamId) + \"/members/$ref\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction AddChannelMembers(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"@odata.type\": \"#microsoft.graph.aadUserConversationMember\",\r\n        \"roles\": [],\r\n        \"user@odata.bind\": baseUriEndpoint + \"/users('\" + properties[ChannelUserId] + \"')\"\r\n    });\r\n\r\n    let teamId = properties[ChannelTeamId];\r\n    let channelId = properties[ChannelId];\r\n\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(teamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/members\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\n// DELETE /groups/{id}/members/{id}/$ref\r\nfunction RemoveGroupMembers(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    // var data = JSON.stringify({\r\n    //     \"@odata.id\": baseUriEndpoint + \"/directoryObjects/\" + parameters[TeamUserId]\r\n    // });\r\n\r\n    let teamId = properties[TeamId];\r\n    if (!(typeof teamId === \"string\")) throw new Error(\"properties[TeamId] is not of type string\");\r\n\r\n    let teamUserId = properties[TeamUserId];\r\n    if (!(typeof teamUserId === \"string\")) throw new Error(\"properties[TeamUserId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/groups/\" + encodeURIComponent(teamId) + \"/members/\" + encodeURIComponent(teamUserId) + \"/$ref\";\r\n    ExecuteRequest(url, null, \"DELETE\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction ExecuteRequest(url: string, data: string, requestType: string, cb) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n        if (xhr.readyState !== 4)\r\n            return;\r\n        if (xhr.status == 201) {\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            var obj = JSON.parse(xhr.responseText);\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 204) {\r\n            if (typeof cb === 'function')\r\n                cb(xhr.responseText);\r\n        }\r\n        else if (xhr.status == 200) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            //console.log(\"ExecuteRequest XHR status: \" + xhr.status + \",\" + xhr.responseText);\r\n            //console.log(\"ExecuteRequest cb type of: \" + (typeof cb).toString());\r\n            if (typeof cb === 'function')\r\n                cb(obj);\r\n        }\r\n        else if (xhr.status == 202) {\r\n            if (typeof cb === 'function')\r\n                cb(null);\r\n        }\r\n        else if (xhr.status == 400) {\r\n            // This is a bad request, return error to UI\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n        }\r\n        else if (xhr.status == 404) {\r\n            var obj = JSON.parse(xhr.responseText);\r\n            // This is to supress an error that happens with team archive/unarchive\r\n            var errorMessage = obj.error.message;\r\n            if (errorMessage.startswith == \"No Team found with Group id\") {\r\n                // do nothing - supress error\r\n            }\r\n            else {\r\n                throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            }\r\n            //console.log(\"MSTeamsConnector ExecuteRequest: Failed with 404 error.\");\r\n            //throw new Error(obj.error.code + \" error: \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n        }\r\n        else {\r\n            postResult({\r\n                //TeamIsSuccessful: false\r\n            });\r\n            var obj = JSON.parse(xhr.responseText);\r\n            throw new Error(obj.error.code + \": \" + obj.error.message);\r\n            //console.log(\"Failed with status \" + xhr.status + \" \" + xhr.responseText);\r\n\r\n        }\r\n    };\r\n    console.log(\"MSTeamsConnector ExecuteRequest: \" + url);\r\n    xhr.open(requestType.toUpperCase(), url);\r\n    // Authentication Header\r\n    xhr.withCredentials = true;\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    if (requestType.toUpperCase() == \"PUT\" || requestType.toUpperCase() == \"POST\" || requestType.toUpperCase() == \"PATCH\") {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    }\r\n    xhr.send(data);\r\n}\r\n\r\nfunction CreateAndReturnTeamObject(parameters: SingleRecord, properties: SingleRecord) {\r\n    postResult({\r\n        [TeamId]: properties[TeamId],\r\n        [TeamDisplayName]: properties[TeamDisplayName],\r\n        [TeamCreationDate]: properties[TeamCreationDate],\r\n        [TeamDescription]: properties[TeamDescription],\r\n        [TeamEmail]: properties[TeamEmail],\r\n        [TeamMailEnabled]: properties[TeamMailEnabled],\r\n        [TeamMailNickname]: properties[TeamMailNickname],\r\n        [TeamWeburl]: properties[TeamWeburl],\r\n        [TeamArchiveStatus]: properties[TeamArchiveStatus],\r\n        [TeamIsSuccessful]: properties[TeamIsSuccessful]\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamAdd(parameters: SingleRecord, properties: SingleRecord) {\r\n    //TODO - Should we make a call to Get Group Details by ID to get the team object details - for returning back to K2 user\r\n    // Add Team to a group\r\n    CreateTeam(parameters, properties, function (b) {\r\n        properties[TeamWeburl] = b.webUrl;\r\n        // Get user\r\n        GetUser(parameters, properties, function (c) {\r\n            properties[TeamUserId] = c.id;\r\n            // Add Owner\r\n            AddGroupOwner(parameters, properties, function (d) {\r\n                // Add Owner As Member\r\n                AddGroupMembers(parameters, properties, function (e) {\r\n                    //Return Team Object\r\n                    CreateAndReturnTeamObject(parameters, properties);\r\n                });\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamUpdate(parameters: SingleRecord, properties: SingleRecord) {\r\n    UpdateTeam(parameters, properties, function (c) {\r\n        if (c.responseText == null || c.responseText == \"\" || c.responseText == undefined || c.responseText == \"undefined\") {\r\n            postResult({\r\n                [TeamIsSuccessful]: true\r\n            });\r\n        }\r\n        //CreateAndReturnTeamObject(parameters, properties);\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamMyTeamsList(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetMyTeams(parameters, properties, function (a) {\r\n        //console.log(a);\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [TeamId]: x.id,\r\n                [TeamDisplayName]: x.displayName,\r\n                [TeamDescription]: x.description,\r\n                [TeamIsArchived]: x.isArchived\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamList(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetTeams(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [TeamId]: x.id,\r\n                [TeamDisplayName]: x.displayName,\r\n                [TeamResourceProvisioningOptions]: x.resourceProvisioningOptions[0]\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction GetTeams(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    if (parameters[TeamDisplayNameStartsWith] == null || parameters[TeamDisplayNameStartsWith] == \"\") {\r\n        let component = \"?$select=id,displayName,resourceProvisioningOptions\";\r\n        var url = baseUriEndpoint + \"/groups\" + component;\r\n    }\r\n    else {\r\n        let teamDisplayNameStartsWith = parameters[TeamDisplayNameStartsWith];\r\n        if (!(typeof teamDisplayNameStartsWith === \"string\")) throw new Error(\"parameters[TeamDisplayNameStartsWith] is not of type string\");\r\n\r\n        let component = \"?$filter=startswith(displayName, '\" + encodeURIComponent(teamDisplayNameStartsWith) + \"')&$select=id,displayName,resourceProvisioningOptions\";\r\n        var url = baseUriEndpoint + \"/groups\" + component;\r\n    }\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetMyTeams(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var url = baseUriEndpoint + \"/me/joinedTeams\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamArchive(parameters: SingleRecord, properties: SingleRecord) {\r\n    ArchiveTeam(parameters, properties, function (b) {\r\n        // CreateAndReturnTeamObject(parameters, properties);\r\n        postResult({\r\n            [TeamId]: properties[TeamId],\r\n            [TeamRequestStatusUrl]: properties[TeamRequestStatusUrl],\r\n            [TeamIsSuccessful]: properties[TeamIsSuccessful]\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamUnarchive(parameters: SingleRecord, properties: SingleRecord) {\r\n    UnarchiveTeam(parameters, properties, function (b) {\r\n        CreateAndReturnTeamObject(parameters, properties);\r\n        postResult({\r\n            [TeamId]: properties[TeamId],\r\n            [TeamRequestStatusUrl]: properties[TeamRequestStatusUrl],\r\n            [TeamIsSuccessful]: properties[TeamIsSuccessful]\r\n        });\r\n    });\r\n}\r\n\r\nfunction CheckArchivalStatus(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = null;\r\n\r\n    let teamArchiveOperationUrl = parameters[TeamArchiveOperationUrl];\r\n    if (!(typeof teamArchiveOperationUrl === \"string\")) throw new Error(\"parameters[TeamArchiveOperationUrl] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/\" + encodeURIComponent(teamArchiveOperationUrl);\r\n    ExecuteRequest(url, data, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamCheckStatus(parameters: SingleRecord, properties: SingleRecord) {\r\n    CheckArchivalStatus(parameters, properties, function (b) {\r\n        postResult({\r\n            [TeamOperationId]: b.id,\r\n            [TeamOperationType]: b.operationType,\r\n            [TeamCreationDate]: b.createdDateTime,\r\n            [TeamArchiveStatus]: b.status,\r\n            [TeamLastActionDate]: b.lastActionDateTime,\r\n            [TeamAttemptsCount]: b.attemptsCount,\r\n            [TeamTargetResourceId]: b.targetResourceId,\r\n            [TeamTargetResourceLocation]: b.targetResourceLocation,\r\n            [TeamArchiveError]: b.error\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamClone(parameters: SingleRecord, properties: SingleRecord) {\r\n    CloneTeam(parameters, properties, function (b) {\r\n        //CreateAndReturnTeamObject(parameters, properties);\r\n        postResult({\r\n            [TeamId]: properties[TeamId],\r\n            [TeamRequestStatusUrl]: properties[TeamRequestStatusUrl],\r\n            [TeamIsSuccessful]: properties[TeamIsSuccessful]\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteChannel(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    if (properties == null && parameters == null) {\r\n        //do nothing\r\n    }\r\n    else if (properties == null && parameters !== null) {\r\n        parameters[ChannelIsSuccessful] = true;\r\n    }\r\n    else {\r\n        properties[ChannelIsSuccessful] = true;\r\n    }\r\n    switch (methodName) {\r\n        case ChannelGet:\r\n            onexecuteChannelGet(parameters, properties);\r\n            break;\r\n        case ChannelList:\r\n            onexecuteChannelList(parameters, properties);\r\n            break;\r\n        case ChannelCreate:\r\n            onexecuteChannelCreate(parameters, properties);\r\n            break;\r\n        case ChannelDelete:\r\n            onexecuteChannelDelete(parameters, properties);\r\n            break;\r\n        case ChannelUpdate:\r\n            onexecuteChannelUpdate(parameters, properties);\r\n            break;\r\n        case ChannelAddMember:\r\n            onexecuteChannelAddMember(parameters, properties);\r\n            break;\r\n        case ChannelSendMessage:\r\n            onexecuteSendMessage(parameters, properties);\r\n            break;\r\n        case ChannelReplyMessage:\r\n            onexecuteReplyMessage(parameters, properties);\r\n            break;\r\n        case ChannelSendAdaptiveCard:\r\n            onexecuteSendAdaptiveCard(parameters, properties);\r\n            break;\r\n        case ChannelMessages:\r\n            onexecuteGetChannelMessages(parameters, properties);\r\n            break;\r\n        default: throw new Error(\"The channel method \" + methodName + \" is not supported...\");\r\n    }\r\n}\r\n\r\nfunction onexecuteTeamAddMember(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUser(parameters, properties, function (b) {\r\n        properties[TeamUserPrincipalName] = b.userPrincipalName;\r\n        properties[TeamUserId] = b.id;\r\n        AddGroupMembers(parameters, properties, function (c) {\r\n            //ToDO - remove the if condition and handle in try catch block\r\n            if (c.responseText == null || c.responseText == \"\" || c.responseText == undefined || c.responseText == \"undefined\") {\r\n                postResult({\r\n                    [TeamIsSuccessful]: true\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelAddMember(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetChannelUser(parameters, properties, function (b) {\r\n        properties[ChannelUserPrincipalName] = b.userPrincipalName;\r\n        properties[ChannelUserId] = b.id;\r\n        AddChannelMembers(parameters, properties, function (c) {\r\n            //ToDO - remove the if condition and handle in try catch block\r\n            if (c.responseText == null || c.responseText == \"\" || c.responseText == undefined || c.responseText == \"undefined\") {\r\n                postResult({\r\n                    [ChannelIsSuccessful]: true\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamRemoveMember(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUser(parameters, properties, function (b) {\r\n        properties[TeamUserId] = b.id;\r\n        properties[TeamUserPrincipalName] = b.userPrincipalName;\r\n        RemoveGroupMembers(parameters, properties, function (c) {\r\n            if (c.responseText == null || c.responseText == \"\" || c.responseText == undefined || c.responseText == \"undefined\") {\r\n                postResult({\r\n                    [TeamIsSuccessful]: true\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteTeamAddOwner(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetUser(parameters, properties, function (b) {\r\n        properties[TeamUserId] = b.id;\r\n        properties[TeamUserPrincipalName] = b.userPrincipalName;\r\n        AddGroupOwner(parameters, properties, function (c) {\r\n            // console.log(\"**after AddGroupOwner\" + c.id + \",\" + c.userPrincipalName);\r\n            // var stringValue = String(parameters[TeamAddAsMemberAlso]);\r\n            // var boolValue = stringValue.toLowerCase() == 'true' ? true : false;\r\n            // console.log(boolValue);\r\n            // if (boolValue) {\r\n            //     AddGroupMembers(parameters, properties, function (d) {\r\n            //         if (d.responseText == null || d.responseText == \"\" || d.responseText == undefined || d.responseText == \"undefined\") {\r\n            //             postResult({\r\n            //                 [TeamIsSuccessful]: true\r\n            //             });\r\n            //         }\r\n            //     });\r\n            // }\r\n            // else {\r\n            if (c.responseText == null || c.responseText == \"\" || c.responseText == undefined || c.responseText == \"undefined\") {\r\n                postResult({\r\n                    [TeamIsSuccessful]: true\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelGet(parameters: SingleRecord, properties: SingleRecord) {\r\n    properties[ChannelIsSuccessful] = true;\r\n    GetChannel(parameters, properties, function (a) {\r\n        properties[ChannelId] = a.id,\r\n            properties[ChannelDisplayName] = a.displayName,\r\n            properties[ChannelDescription] = a.description,\r\n            properties[ChannelEmail] = a.email,\r\n            properties[ChannelWeburl] = a.webUrl\r\n        //Post Results\r\n        CreateAndReturnChannelObject(parameters, properties);\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelList(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetChannelList(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [ChannelId]: x.id,\r\n                [ChannelDisplayName]: x.displayName,\r\n                [ChannelDescription]: x.description,\r\n                [ChannelEmail]: x.email\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction onexecuteGetChannelMessages(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetChannelMessages(parameters, properties, function (a) {\r\n        postResult(a.map(x => {\r\n            return {\r\n                [ChannelMessageId]: x.id,\r\n                [ChannelMessageBody]: x.message,\r\n                [ChannelMessageUser]: x.user,\r\n                [ChannelMessageDate]: x.date\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelCreate(parameters: SingleRecord, properties: SingleRecord) {\r\n    CreateChannel(parameters, properties, function (a) {\r\n        properties[ChannelId] = a.id;\r\n        properties[ChannelDisplayName] = a.displayName;\r\n        properties[ChannelDescription] = a.description;\r\n        properties[ChannelEmail] = a.email;\r\n        properties[ChannelWeburl] = a.webUrl;\r\n        CreateAndReturnChannelObject(parameters, properties);\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelUpdate(parameters: SingleRecord, properties: SingleRecord) {\r\n    UpdateChannel(parameters, properties, function (a) {\r\n        properties[ChannelId] = a.id;\r\n        properties[ChannelDisplayName] = a.displayName;\r\n        properties[ChannelDescription] = a.description;\r\n        properties[ChannelEmail] = a.email;\r\n        properties[ChannelWeburl] = a.webUrl;\r\n        // CreateAndReturnChannelObject(parameters, properties);\r\n        postResult({\r\n            [ChannelIsSuccessful]: true\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteChannelDelete(parameters: SingleRecord, properties: SingleRecord) {\r\n    DeleteChannel(parameters, properties, function (a) {\r\n        postResult({\r\n            [ChannelIsSuccessful]: true\r\n        });\r\n    });\r\n}\r\n\r\nfunction DeleteChannel(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId);\r\n    ExecuteRequest(url, null, \"DELETE\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction CreateChannel(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"displayName\": properties[ChannelDisplayName],\r\n        \"description\": properties[ChannelDescription],\r\n        \"membershipType\": properties[MembershipType]\r\n    });\r\n\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction CreateAndReturnChannelObject(parameters: SingleRecord, properties: SingleRecord) {\r\n    //var ChannelId = String(properties[ChannelId]);\r\n    // if (ChannelId == null || ChannelId == \"undefined\" || ChannelId == \"\" || ChannelId == undefined)\r\n    //     parameters[ChannelId] = properties[ChannelId];\r\n    postResult({\r\n        [ChannelId]: properties[ChannelId],\r\n        [ChannelDisplayName]: properties[ChannelDisplayName],\r\n        [ChannelDescription]: properties[ChannelDescription],\r\n        [ChannelEmail]: properties[ChannelEmail],\r\n        [ChannelWeburl]: properties[ChannelWeburl],\r\n        [ChannelIsSuccessful]: properties[ChannelIsSuccessful]\r\n    });\r\n}\r\n\r\nfunction GetChannel(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId);\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetChannelList(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels?$select=id, displayname, description, email\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction GetChannelMessages(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    //console.log(`GetChannelMessages Started: Team ID:${properties[ChannelTeamId]} Channel ID:${properties[ChannelId]}`);\r\n    let channelTeamId = properties[ChannelTeamId];\r\n\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/messages\";\r\n\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function') {\r\n            //console.log(`GET Succeeded: ${responseText}`);\r\n            var messages = responseText.value.map(x => { return { \"id\": x.id, \"message\": GetCleanedMessage(x), \"user\": x.from.user.displayName, \"date\": x.createdDateTime } })\r\n            console.log(messages);\r\n            cb(messages);\r\n        }\r\n    });\r\n}\r\n\r\nfunction GetCleanedMessage(messageObject) {\r\n    var message = messageObject.body.content;\r\n\r\n    if (message.indexOf('<attachment id=\"74d20c7f34aa4a7fb74e2b30004247c5\"></attachment>') > -1) {\r\n        message = \"\";\r\n        var card = messageObject.attachments[0].content;\r\n        var cardObject = JSON.parse(card);\r\n\r\n        cardObject.body.forEach(b => {\r\n            if (b.type == \"ColumnSet\") {\r\n                b.columns.forEach(c => {\r\n                    c.items.forEach(i => {\r\n                        if (i.type == \"TextBlock\") {\r\n                            var startTag = i.size != undefined && i.size == \"large\" ? \"<h3>\" : \"<span>\";\r\n                            var boldStartTag = i.weight != undefined && i.weight == \"bolder\" ? \"<b>\" : \"\";\r\n                            var boldEndTag = boldStartTag == \"<b>\" ? \"</b>\" : \"\";\r\n                            var endTag = startTag == \"<h3>\" ? \"</h3>\" : \"</span>\";\r\n\r\n                            message += `<div class='teams-message-row'>${startTag}${boldStartTag}${i.text}${boldEndTag}${endTag}</div>`;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    message = message.replace(\"<at\", \"<b\").replace(\"</at>\", \"</b>\");\r\n\r\n    return message;\r\n}\r\n\r\nfunction UpdateChannel(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"displayName\": properties[ChannelDisplayName],\r\n        \"description\": properties[ChannelDescription]\r\n        //\"email\": \"test@k2rocks.com\" TODO: Pass the correct parameter here\r\n    });\r\n\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId);\r\n    ExecuteRequest(url, data, \"PATCH\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteSendMessage(parameters: SingleRecord, properties: SingleRecord) {\r\n    SendMessage(parameters, properties, function (a) {\r\n        postResult({\r\n            [ChannelIsSuccessful]: true,\r\n            [ChannelMessageId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction onexecuteSendAdaptiveCard(parameters: SingleRecord, properties: SingleRecord) {\r\n    SendAdaptiveCard(parameters, properties, function (a) {\r\n        postResult({\r\n            [ChannelIsSuccessful]: true,\r\n            [ChannelMessageId]: a.id\r\n        });\r\n    });\r\n}\r\n\r\nfunction SendAdaptiveCard(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    var data = JSON.stringify(\r\n        {\r\n            \"subject\": null,\r\n            \"body\": {\r\n                \"contentType\": \"html\",\r\n                \"content\": \"<attachment id=\\\"74d20c7f34aa4a7fb74e2b30004247c5\\\"></attachment>\"\r\n            },\r\n            \"attachments\": [\r\n                {\r\n                    \"id\": \"74d20c7f34aa4a7fb74e2b30004247c5\",\r\n                    \"contentType\": \"application/vnd.microsoft.card.adaptive\",\r\n                    \"content\": properties[ChannelMessageBody].toString()\r\n                }\r\n            ]\r\n        }\r\n    );\r\n\r\n    var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/messages\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction SendMessage(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    if (properties[ChannelMessageBody].toString().indexOf(\"<at\") > -1) {\r\n        GetUsers(function (u) {\r\n            var importance = properties[ChannelMessageIsImportant] == \"true\" ? \"High\" : \"Normal\";\r\n            var obj = {\r\n                \"subject\": properties[ChannelMessageSubject],\r\n                \"importance\": importance.toString(),\r\n                \"body\": {\r\n                    \"contentType\": \"html\",\r\n                    \"content\": properties[ChannelMessageBody]\r\n                },\r\n                \"mentions\": []\r\n            };\r\n\r\n            if (properties[ChannelMessageBody].toString().indexOf(\"<at\") > -1) {\r\n                obj.mentions = GetMentions(properties, properties[ChannelMessageBody], u);\r\n            }\r\n\r\n            var data = JSON.stringify(obj);\r\n\r\n            let channelTeamId = properties[ChannelTeamId];\r\n            if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n            let channelId = properties[ChannelId];\r\n            if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n            var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/messages\";\r\n            ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n                if (typeof cb === 'function')\r\n                    cb(responseText);\r\n            });\r\n        });\r\n    }\r\n    else {\r\n        var importance = properties[ChannelMessageIsImportant] == \"true\" ? \"High\" : \"Normal\";\r\n        var data = JSON.stringify({\r\n            \"subject\": properties[ChannelMessageSubject],\r\n            \"importance\": importance.toString(),\r\n            \"body\": {\r\n                \"contentType\": \"html\",\r\n                \"content\": properties[ChannelMessageBody]\r\n            }\r\n        });\r\n\r\n        let channelTeamId = properties[ChannelTeamId];\r\n        if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n        let channelId = properties[ChannelId];\r\n        if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n        var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/messages\";\r\n        ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n            if (typeof cb === 'function')\r\n                cb(responseText);\r\n        });\r\n    }\r\n}\r\n\r\nfunction GetMentions(properties, message, payload) {\r\n    var mentions = [];\r\n    var users = payload.value;\r\n    var matches = message.match(/<at[^>]*>.*?<\\/at>/gm);\r\n\r\n    for (let i = 0; i < matches.length; i++) {\r\n        var displayName = matches[i].replace(/<[^>]+>/g, '');\r\n        var user = users.filter(function (item) { return item.displayName == displayName })\r\n\r\n        var mentionObj = {\r\n            \"id\": i,\r\n            \"mentionText\": displayName,\r\n            \"mentioned\": {\r\n                \"application\": null,\r\n                \"device\": null,\r\n                \"conversation\": null,\r\n                \"user\": {\r\n                    \"id\": user[0].id,\r\n                    \"displayName\": displayName,\r\n                    \"userIdentityType\": \"aadUser\"\r\n                }\r\n            }\r\n        };\r\n        mentions.push(mentionObj);\r\n    }\r\n\r\n    return mentions;\r\n}\r\n\r\nfunction onexecuteReplyMessage(parameters: SingleRecord, properties: SingleRecord) {\r\n    ReplyMessage(parameters, properties, function (a) {\r\n        postResult({\r\n            [ChannelIsSuccessful]: true\r\n        });\r\n    });\r\n}\r\n\r\nfunction ReplyMessage(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"body\": {\r\n            \"contentType\": \"html\",\r\n            \"content\": properties[ChannelMessageBody]\r\n        }\r\n    });\r\n\r\n    let channelTeamId = properties[ChannelTeamId];\r\n    if (!(typeof channelTeamId === \"string\")) throw new Error(\"properties[ChannelTeamId] is not of type string\");\r\n\r\n    let channelId = properties[ChannelId];\r\n    if (!(typeof channelId === \"string\")) throw new Error(\"properties[ChannelId] is not of type string\");\r\n\r\n    let channelMessageId = properties[ChannelMessageId];\r\n    if (!(typeof channelMessageId === \"string\")) throw new Error(\"properties[ChannelMessageId] is not of type string\");\r\n\r\n    var url = baseUriEndpointBeta + \"/teams/\" + encodeURIComponent(channelTeamId) + \"/channels/\" + encodeURIComponent(channelId) + \"/messages/\" + + encodeURIComponent(channelMessageId) + \"/replies\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteTabGet(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetTabInformation(parameters, properties, function (a) {\r\n        postResult({\r\n            [TabId]: a.id,\r\n            [TabDisplayName]: a.displayName,\r\n            [TabConfigEntityId]: a.configuration.entityId,\r\n            [TabConfigContentUrl]: a.configuration.contentUrl,\r\n            [TabConfigWebsiteUrl]: a.configuration.websiteUrl,\r\n            [TabConfigRemoveUrl]: a.configuration.removeUrl,\r\n            [TabTeamsAppAppId]: a.teamsApp.id,\r\n            [TabTeamsAppExternalId]: a.teamsApp.externalId,\r\n            [TabTeamsAppAppDisplayName]: a.teamsApp.displayName,\r\n            [TabTeamsAppDistMethod]: a.teamsApp.distributionMethod,\r\n            [TabSortOrderIndex]: a.sortOrderIndex,\r\n            [TabWeburl]: a.webUrl\r\n        });\r\n    });\r\n}\r\n\r\nfunction GetTabInformation(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let tabTeamId = properties[TabTeamId];\r\n    if (!(typeof tabTeamId === \"string\")) throw new Error(\"properties[TabTeamId] is not of type string\");\r\n\r\n    let tabChannelId = properties[TabChannelId];\r\n    if (!(typeof tabChannelId === \"string\")) throw new Error(\"properties[TabChannelId] is not of type string\");\r\n\r\n    let tabId = properties[TabId];\r\n    if (!(typeof tabId === \"string\")) throw new Error(\"properties[TabId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(tabTeamId) + \"/Channels/\" + encodeURIComponent(tabChannelId) + \"/tabs/\" + encodeURIComponent(tabId) + \"?$expand=teamsApp\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteTabUpdate(parameters: SingleRecord, properties: SingleRecord) {\r\n    UpdateTab(parameters, properties, function (a) {\r\n        postResult({\r\n            [TabIsSuccessful]: true\r\n        });\r\n    });\r\n}\r\n\r\nfunction UpdateTab(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    var data = JSON.stringify({\r\n        \"displayName\": properties[TabDisplayName],\r\n        \"contentUrl\": properties[TabConfigContentUrl],\r\n        \"removeUrl\": properties[TabConfigRemoveUrl],\r\n        \"websiteUrl\": properties[TabConfigWebsiteUrl],\r\n    });\r\n\r\n    let tabTeamId = properties[TabTeamId];\r\n    if (!(typeof tabTeamId === \"string\")) throw new Error(\"properties[TabTeamId] is not of type string\");\r\n\r\n    let tabChannelId = properties[TabChannelId];\r\n    if (!(typeof tabChannelId === \"string\")) throw new Error(\"properties[TabChannelId] is not of type string\");\r\n\r\n    let tabId = properties[TabId];\r\n    if (!(typeof tabId === \"string\")) throw new Error(\"properties[TabId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(tabTeamId) + \"/Channels/\" + encodeURIComponent(tabChannelId) + \"/tabs/\" + encodeURIComponent(tabId);\r\n    ExecuteRequest(url, data, \"PATCH\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction onexecuteTabList(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetTabList(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [TabId]: x.id,\r\n                [TabDisplayName]: x.displayName,\r\n                [TabWeburl]: x.webUrl\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction onexecuteTabCreate(methodName: string, parameters: SingleRecord, properties: SingleRecord) {\r\n    switch (methodName) {\r\n        case TabCreateWordTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Word\", properties));\r\n            break;\r\n        case TabCreateExcelTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Excel\", properties));\r\n            break;\r\n        case TabCreatePowerPointTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"PowerPoint\", properties));\r\n            break;\r\n        case TabCreatePdfTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"PDF\", properties));\r\n            break;\r\n        case TabCreateOneNoteTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"OneNote\", properties));\r\n            break;\r\n        case TabCreatePlannerTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Planner\", properties));\r\n            break;\r\n        case TabCreateSharePointTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"SharePoint\", properties));\r\n            break;\r\n        case TabCreateMsFormsTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"MicrosoftForms\", properties));\r\n            break;\r\n        case TabCreateMsStreamTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"MicrosoftStream\", properties));\r\n            break;\r\n        case TabCreateWebsiteTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Website\", properties));\r\n            break;\r\n        case TabCreateWikiTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Wiki\", properties));\r\n            break;\r\n        case TabCreatePowerBiTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"PowerBI\", properties));\r\n            break;\r\n        case TabCreateDocumentLibraryTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"DocumentLibrary\", properties));\r\n            break;\r\n        case TabCreateCustomTab:\r\n            prepareDataAndCreateTab(parameters, properties, getRequestBody(\"Custom\", properties));\r\n            break;\r\n        default: throw new Error(\"The object \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\n\r\nfunction prepareDataAndCreateTab(parameters: SingleRecord, properties: SingleRecord, requestBody) {\r\n    requestBody.configuration = {\r\n        \"entityId\": properties[TabConfigEntityId],\r\n        \"contentUrl\": properties[TabConfigContentUrl],\r\n        \"removeUrl\": properties[TabConfigRemoveUrl],\r\n        \"websiteUrl\": properties[TabConfigWebsiteUrl]\r\n    };\r\n\r\n    CreateTab(parameters, properties, JSON.stringify(requestBody), function (a) {\r\n        // CreateAndReturnChannelObject(parameters, properties);\r\n        postResult({\r\n            [TabId]: a.id,\r\n            [TabDisplayName]: a.displayName,\r\n            [TabWeburl]: a.webUrl,\r\n            [TabConfigEntityId]: a.configuration.entityId,\r\n            [TabConfigContentUrl]: a.configuration.contentUrl,\r\n            [TabConfigWebsiteUrl]: a.configuration.websiteUrl,\r\n            [TabConfigRemoveUrl]: a.configuration.removeUrl,\r\n            [TabIsSuccessful]: true\r\n        });\r\n    });\r\n}\r\n\r\nfunction CreateTab(parameters: SingleRecord, properties: SingleRecord, data: string, cb) {\r\n    let tabTeamId = properties[TabTeamId];\r\n    if (!(typeof tabTeamId === \"string\")) throw new Error(\"properties[TabTeamId] is not of type string\");\r\n\r\n    let tabChannelId = properties[TabChannelId];\r\n    if (!(typeof tabChannelId === \"string\")) throw new Error(\"properties[TabChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(tabTeamId) + \"/channels/\" + encodeURIComponent(tabChannelId) + \"/tabs\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\nfunction getRequestBody(tabType: string, properties) {\r\n    var data;\r\n    switch (tabType) {\r\n        case \"Word\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.file.staticviewer.word\"\r\n            };\r\n            break;\r\n        case \"Excel\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.file.staticviewer.excel\"\r\n            };\r\n            break;\r\n        case \"Powerpoint\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.file.staticviewer.powerpoint\"\r\n            };\r\n            break;\r\n        case \"PDF\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.file.staticviewer.pdf\"\r\n            };\r\n            break;\r\n        case \"OneNote\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/0d820ecd-def2-4297-adad-78056cde7c78\"\r\n            };\r\n            break;\r\n        case \"Planner\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.planner\"\r\n            };\r\n            break;\r\n        case \"SharePoint\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/2a527703-1f6f-4559-a332-d8a7d288cd88\"\r\n            };\r\n            break;\r\n        case \"MicrosoftForms\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/81fef3a6-72aa-4648-a763-de824aeafb7d\"\r\n            };\r\n            break;\r\n        case \"MicrosoftStream\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoftstream.embed.skypeteamstab\"\r\n            };\r\n            break;\r\n        case \"Website\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.web\"\r\n            };\r\n            break;\r\n        case \"Wiki\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.wiki\"\r\n            };\r\n            break;\r\n        case \"PowerBI\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.powerbi\"\r\n            };\r\n            break;\r\n        case \"DocumentLibrary\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.files.sharepoint\"\r\n            };\r\n            break;\r\n        case \"Custom\":\r\n            data = {\r\n                \"displayName\": properties[TabDisplayName],\r\n                \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/\" + properties[TabTeamsAppAppId]\r\n            };\r\n            break;\r\n        default: throw new Error(\"Tab Type is not supported or app is not installed!\");\r\n    }\r\n    return data;\r\n}\r\n\r\nfunction onexecuteTabDelete(parameters: SingleRecord, properties: SingleRecord) {\r\n    DeleteTab(parameters, properties, function (a) {\r\n        if (a == null || a == \"\") {\r\n            postResult({\r\n                [TabIsSuccessful]: true\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction DeleteTab(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let tabTeamId = properties[TabTeamId];\r\n    if (!(typeof tabTeamId === \"string\")) throw new Error(\"properties[TabTeamId] is not of type string\");\r\n\r\n    let tabChannelId = properties[TabChannelId];\r\n    if (!(typeof tabChannelId === \"string\")) throw new Error(\"properties[TabChannelId] is not of type string\");\r\n\r\n    let tabId = properties[TabId];\r\n    if (!(typeof tabId === \"string\")) throw new Error(\"properties[TabId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(tabTeamId) + \"/Channels/\" + encodeURIComponent(tabChannelId) + \"/tabs/\" + encodeURIComponent(tabId);\r\n    ExecuteRequest(url, null, \"DELETE\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\n\r\nfunction GetInstalledAppList(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let appTeamId = properties[AppTeamId];\r\n    if (!(typeof appTeamId === \"string\")) throw new Error(\"properties[AppTeamId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(appTeamId) + \"/installedApps?$expand=teamsAppDefinition\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}\r\n\r\n\r\nfunction onexecuteInstalledAppList(parameters: SingleRecord, properties: SingleRecord) {\r\n    GetInstalledAppList(parameters, properties, function (a) {\r\n        postResult(a.value.map(x => {\r\n            return {\r\n                [AppId]: x.id,\r\n                [AppDisplayName]: x.teamsAppDefinition.displayName,\r\n                [AppVersion]: x.teamsAppDefinition.version,\r\n                [AppTeamAppDefinitionId]: x.teamsAppDefinition.id,\r\n                [AppTeamsAppId]: x.teamsAppDefinition.teamsAppId\r\n            };\r\n        }));\r\n    });\r\n}\r\n\r\nfunction onexecutePolicySet(parameters: SingleRecord, properties: SingleRecord) {\r\n    SetTokenPolicy(parameters, properties, function (a) {\r\n        postResult({ [TokenUpdateSuccess]: a.TokenUpdateSuccess });\r\n    });\r\n}\r\n\r\nfunction SetTokenPolicy(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let tokenLifetime = properties[TokenLifetime];\r\n    let policyDisplayName = properties[TokenPolicyDisplayName];\r\n    let isOrgDefault = properties[TokenOrganizationDefault].toString() == \"true\";\r\n\r\n    if (!(typeof tokenLifetime === \"string\")) throw new Error(\"properties[TokenLifetime] is not of type string\");\r\n    if (!(typeof policyDisplayName === \"string\")) throw new Error(\"properties[TokenPolicyDisplayName] is not of type string\");\r\n\r\n    var data = JSON.stringify({\r\n        \"definition\": [\r\n            \"{\\\"TokenLifetimePolicy\\\":{\\\"Version\\\":1,\\\"AccessTokenLifetime\\\":\\\"\" + tokenLifetime + \"\\\"}}\"\r\n        ],\r\n        \"displayName\": policyDisplayName,\r\n        \"isOrganizationDefault\": isOrgDefault\r\n    });\r\n\r\n    var url = baseUriEndpointBeta + \"/policies/tokenLifetimePolicies\";\r\n    ExecuteRequest(url, data, \"POST\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb({ TokenUpdateSuccess: true });\r\n    });\r\n}\r\n\r\nfunction GetTabList(parameters: SingleRecord, properties: SingleRecord, cb) {\r\n    let tabTeamId = properties[TabTeamId];\r\n    if (!(typeof tabTeamId === \"string\")) throw new Error(\"properties[TabTeamId] is not of type string\");\r\n\r\n    let tabChannelId = properties[TabChannelId];\r\n    if (!(typeof tabChannelId === \"string\")) throw new Error(\"properties[TabChannelId] is not of type string\");\r\n\r\n    var url = baseUriEndpoint + \"/teams/\" + encodeURIComponent(tabTeamId) + \"/channels/\" + encodeURIComponent(tabChannelId) + \"/tabs?$select=id,displayName,webUrl\";\r\n    ExecuteRequest(url, null, \"GET\", function (responseText) {\r\n        if (typeof cb === 'function')\r\n            cb(responseText);\r\n    });\r\n}","import '@k2oss/k2-broker-core';\r\nimport './index.ts';\r\n\r\nfunction mock(name: string, value: any) {\r\n    global[name] = value;\r\n}\r\n\r\n// This value is obfuscated on purpose. Replace with a valid OAuth token to run\r\nlet OAuthToken = \"\";\r\n\r\nlet schema = null;\r\nmock('postSchema', function (result: any) {\r\n    schema = result;\r\n    console.log(\"postSchema:\");\r\n    console.log(schema);\r\n});\r\n\r\nlet result: any = null;\r\nfunction pr(r: any) {\r\n    result = r;\r\n   // console.log(\"postResult:\")\r\n   // console.log(JSON.stringify(result));\r\n}\r\n\r\nmock('postResult', pr);\r\nlet xhr: { [key: string]: any } = null;\r\nclass XHR {\r\n    public onreadystatechange: () => void;\r\n    public readyState: number;\r\n    public status: number;\r\n    public responseText: string;\r\n    public withCredentials: boolean\r\n\r\n    private recorder: { [key: string]: any };\r\n\r\n    constructor() {\r\n        xhr = this.recorder = {};\r\n        this.recorder.headers = {};\r\n    }\r\n\r\n    open(method: string, url: string) {\r\n        this.recorder.opened = { method, url };\r\n    }\r\n\r\n    setRequestHeader(key: string, value: string) {\r\n        this.recorder.headers[key] = value;\r\n       // console.log(\"setRequestHeader: \" + key + \"=\" + value);\r\n    }\r\n\r\n    send(payload) {\r\n        const request = require('request')\r\n        if (this.withCredentials) {\r\n            this.setRequestHeader(\"Authorization\", \"Bearer \" + OAuthToken);\r\n        }\r\n\r\n        const options = {\r\n            method: this.recorder.opened.method,\r\n            url: this.recorder.opened.url,\r\n            headers: this.recorder.headers,\r\n            body: payload,\r\n            strictSSL: false\r\n        };\r\n       // console.log(\"URL: \" + options.method + \" \" + options.url);\r\n       // console.log(\"BODY: \" + options.body);\r\n        let promise = new Promise((resolve, reject) => {\r\n            try {\r\n                request(options, (error, res, body) => {\r\n                    if (error) {\r\n                        console.error(\"error inside request:\" + error)\r\n                        return\r\n                    }\r\n                    this.responseText = body;\r\n                    this.readyState = 4;\r\n                    this.status = res.statusCode;\r\n                    this.onreadystatechange();\r\n                    resolve(body);\r\n                    delete this.responseText;\r\n                });\r\n            }\r\n            catch (err) {\r\n                console.log(\"error ouside request \" + err);\r\n                reject()\r\n            }\r\n        }).catch((errr) => {\r\n            console.log(\"Promise error:\" + errr);\r\n        });\r\n    }\r\n}\r\n\r\nmock('XMLHttpRequest', XHR);\r\n\r\nonexecute({\r\n    objectName: 'channel',\r\n    methodName: 'getMessages',\r\n    properties: {\"teamId\":\"38a1ad5f-7d84-4533-8688-741f9bcaa060\",\"id\":\"19:46eadc3a0c4a41f2b7ac3f5a237a3fa7@thread.tacv2\"},\r\n    parameters: {},\r\n    configuration: {},\r\n    schema: {}\r\n});\r\n\r\n"],"names":["metadata","systemName","displayName","description","baseUriEndpoint","baseUriEndpointBeta","CreateTeam","parameters","properties","cb","data","JSON","stringify","ExecuteRequest","responseText","GetUser","teamUserPrincipalName","Error","encodeURIComponent","AddGroupOwner","teamId","AddGroupMembers","url","requestType","xhr","XMLHttpRequest","onreadystatechange","readyState","status","obj","parse","error","code","message","postResult","startswith","console","log","open","toUpperCase","withCredentials","setRequestHeader","send","CreateAndReturnTeamObject","CreateAndReturnChannelObject","GetCleanedMessage","messageObject","body","content","indexOf","card","attachments","forEach","b","type","columns","c","items","i","startTag","undefined","size","boldStartTag","weight","boldEndTag","endTag","text","replace","onexecuteTabCreate","methodName","prepareDataAndCreateTab","getRequestBody","requestBody","configuration","tabTeamId","tabChannelId","CreateTab","a","id","webUrl","entityId","contentUrl","websiteUrl","removeUrl","tabType","mock","name","value","global","ondescribe","postSchema","objects","methods","inputs","requiredInputs","outputs","onexecute","objectName","GetGroupDetailsById","createdDateTime","mail","mailEnabled","mailNickname","GetTeamDetailsByID","isArchived","onexecuteTeamGet","CreateGroup","onexecuteTeamCreate","d","e","onexecuteTeamAdd","UpdateTeam","onexecuteTeamUpdate","teamDisplayNameStartsWith","component","GetTeams","map","x","resourceProvisioningOptions","onexecuteTeamList","ArchiveTeam","onexecuteTeamArchive","UnarchiveTeam","onexecuteTeamUnarchive","userPrincipalName","onexecuteTeamAddMember","teamUserId","RemoveGroupMembers","onexecuteTeamRemoveMember","CloneTeam","onexecuteTeamClone","onexecuteTeamAddOwner","teamArchiveOperationUrl","CheckArchivalStatus","operationType","lastActionDateTime","attemptsCount","targetResourceId","targetResourceLocation","onexecuteTeamCheckStatus","onexecuteTeam","channelTeamId","channelId","GetChannel","email","onexecuteChannelGet","GetChannelList","onexecuteChannelList","CreateChannel","onexecuteChannelCreate","DeleteChannel","onexecuteChannelDelete","UpdateChannel","onexecuteChannelUpdate","channelUserPrincipalName","GetChannelUser","AddChannelMembers","onexecuteChannelAddMember","toString","GetUsers","u","importance","mentions","payload","users","matches","match","length","user","filter","item","mentionObj","push","GetMentions","SendMessage","onexecuteSendMessage","channelMessageId","ReplyMessage","onexecuteReplyMessage","SendAdaptiveCard","onexecuteSendAdaptiveCard","messages","from","GetChannelMessages","date","onexecuteGetChannelMessages","onexecuteChannel","tabId","GetTabInformation","teamsApp","externalId","distributionMethod","sortOrderIndex","onexecuteTabGet","UpdateTab","onexecuteTabUpdate","GetTabList","onexecuteTabList","DeleteTab","onexecuteTabDelete","onexecuteTab","appTeamId","GetInstalledAppList","teamsAppDefinition","version","teamsAppId","onexecuteInstalledAppList","onexecuteApp","tokenLifetime","policyDisplayName","isOrgDefault","TokenUpdateSuccess","SetTokenPolicy","onexecutePolicySet","onexecuteToken","schema","result","r","constructor","this","recorder","headers","method","opened","key","request","require","options","strictSSL","Promise","resolve","reject","res","statusCode","err","catch","errr"],"mappings":"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"}